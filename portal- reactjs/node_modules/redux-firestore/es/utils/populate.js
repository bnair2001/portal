'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.promisesForPopulate = exports.populateList = exports.getPopulateChild = exports.getPopulates = exports.getPopulateObjs = exports.getChildType = exports.getPopulateObj = undefined;

var _lodash = require('lodash');

var getPopulateObj = exports.getPopulateObj = function getPopulateObj(str) {
  if (!(0, _lodash.isString)(str)) {
    return str;
  }
  var strArray = str.split(':');

  return { child: strArray[0], root: strArray[1] };
};
var getChildType = exports.getChildType = function getChildType(child) {
  if ((0, _lodash.isString)(child)) {
    return 'string';
  }
  if ((0, _lodash.isArray)(child)) {
    return 'array';
  }
  if ((0, _lodash.isObject)(child)) {
    return 'object';
  }
  return 'other';
};

var getPopulateObjs = exports.getPopulateObjs = function getPopulateObjs(arr) {
  if (!(0, _lodash.isArray)(arr)) {
    return arr;
  }
  return arr.map(function (o) {
    return (0, _lodash.isObject)(o) ? o : getPopulateObj(o);
  });
};

var getPopulates = exports.getPopulates = function getPopulates(params) {
  var populates = (0, _lodash.filter)(params, function (param) {
    return param.indexOf('populate') !== -1 || (0, _lodash.isObject)(param) && param.populates;
  }).map(function (p) {
    return p.split('=')[1];
  });

  if (!populates.length) {
    return null;
  }
  return populates.map(getPopulateObj);
};

var getPopulateChild = exports.getPopulateChild = function getPopulateChild(firebase, populate, id) {
  return firebase.database().ref().child(populate.root + '/' + id).once('value').then(function (snap) {
    return snap.val();
  });
};

var populateList = exports.populateList = function populateList(firebase, list, p, results) {
  if (!results[p.root]) {
    (0, _lodash.set)(results, p.root, {});
  }
  return Promise.all((0, _lodash.map)(list, function (id, childKey) {
    var populateKey = id === true ? childKey : id;
    return getPopulateChild(firebase, p, populateKey).then(function (pc) {
      if (pc) {
        return (0, _lodash.set)(results, p.root + '.' + populateKey, pc);
      }
      return results;
    });
  }));
};

var promisesForPopulate = exports.promisesForPopulate = function promisesForPopulate(firebase, dataKey, originalData, populatesIn) {
  var promisesArray = [];
  var results = {};

  var populatesForData = getPopulateObjs((0, _lodash.isFunction)(populatesIn) ? populatesIn(dataKey, originalData) : populatesIn);

  var dataHasPopulateChilds = (0, _lodash.every)(populatesForData, function (populate) {
    return (0, _lodash.has)(originalData, populate.child);
  });

  if (dataHasPopulateChilds) {
    (0, _lodash.forEach)(populatesForData, function (p) {
      if ((0, _lodash.isString)((0, _lodash.get)(originalData, p.child))) {
        return promisesArray.push(getPopulateChild(firebase, p, (0, _lodash.get)(originalData, p.child)).then(function (v) {
          if (v) {
            (0, _lodash.set)(results, p.root + '.' + (0, _lodash.get)(originalData, p.child), v);
          }
        }));
      }

      return promisesArray.push(populateList(firebase, (0, _lodash.get)(originalData, p.child), p, results));
    });
  } else {
    (0, _lodash.forEach)(originalData, function (d, key) {
      var populatesForDataItem = getPopulateObj((0, _lodash.isFunction)(populatesIn) ? populatesIn(key, d) : populatesIn);

      (0, _lodash.forEach)(populatesForDataItem, function (p) {
        var idOrList = (0, _lodash.get)(d, p.child);

        if (!idOrList) {
          return;
        }

        if ((0, _lodash.isString)(idOrList)) {
          return promisesArray.push(getPopulateChild(firebase, p, idOrList).then(function (v) {
            if (v) {
              (0, _lodash.set)(results, p.root + '.' + idOrList, v);
            }
            return results;
          }));
        }

        if ((0, _lodash.isArray)(idOrList) || (0, _lodash.isObject)(idOrList)) {
          return promisesArray.push(populateList(firebase, idOrList, p, results));
        }
      });
    });
  }

  return Promise.all(promisesArray).then(function () {
    return results;
  });
};

exports.default = { promisesForPopulate: promisesForPopulate };