'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linkWithCredential = exports.reloadAuth = exports.updateEmail = exports.updateAuth = exports.updateProfile = exports.verifyPasswordResetCode = exports.confirmPasswordReset = exports.resetPassword = exports.createUser = exports.logout = exports.login = exports.init = exports.createUserProfile = exports.watchUserProfile = exports.unWatchUserProfile = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _lodash = require('lodash');

var _constants = require('../constants');

var _auth = require('../utils/auth');

var _populate = require('../utils/populate');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var dispatchLoginError = function dispatchLoginError(dispatch, authError) {
  return dispatch({
    type: _constants.actionTypes.LOGIN_ERROR,
    authError: authError
  });
};

var unWatchUserProfile = exports.unWatchUserProfile = function unWatchUserProfile(firebase) {
  var authUid = firebase._.authUid;
  var userProfile = firebase._.config.userProfile;
  if (firebase._.profileWatch) {
    firebase.database().ref().child(userProfile + '/' + authUid).off('value', firebase._.profileWatch);
    firebase._.profileWatch = null;
  }
};

var watchUserProfile = exports.watchUserProfile = function watchUserProfile(dispatch, firebase) {
  var _firebase$_ = firebase._,
      authUid = _firebase$_.authUid,
      userProfile = _firebase$_.config.userProfile;

  unWatchUserProfile(firebase);

  if (userProfile && firebase.database) {
    firebase._.profileWatch = firebase.database().ref().child(userProfile + '/' + authUid).on('value', function (snap) {
      var _firebase$_$config = firebase._.config,
          profileParamsToPopulate = _firebase$_$config.profileParamsToPopulate,
          autoPopulateProfile = _firebase$_$config.autoPopulateProfile;

      if (!profileParamsToPopulate || !(0, _lodash.isArray)(profileParamsToPopulate) && !(0, _lodash.isString)(profileParamsToPopulate)) {
        dispatch({ type: _constants.actionTypes.SET_PROFILE, profile: snap.val() });
      } else {
        (0, _populate.promisesForPopulate)(firebase, snap.key, snap.val(), profileParamsToPopulate).then(function (data) {
          (0, _lodash.forEach)(data, function (result, path) {
            dispatch({
              type: _constants.actionTypes.SET,
              path: path,
              data: result,
              timestamp: Date.now(),
              requesting: false,
              requested: true
            });
          });
          dispatch({ type: _constants.actionTypes.SET_PROFILE, profile: snap.val() });

          if (autoPopulateProfile) {
            console.warn('Auto populate is no longer supported. We are working on backwards compatibility for v2.0.0');
          }
        });
      }
    });
  }
};

var createUserProfile = exports.createUserProfile = function createUserProfile(dispatch, firebase, userData, profile) {
  var config = firebase._.config;

  if (!config.userProfile || !firebase.database) {
    return Promise.resolve(userData);
  }

  if ((0, _lodash.isFunction)(config.profileFactory)) {
    try {
      profile = config.profileFactory(userData, profile);
    } catch (err) {
      console.error('Error occured within profileFactory function:', err.message || err);
      return Promise.reject(err);
    }
  }

  return firebase.database().ref().child(config.userProfile + '/' + userData.uid).once('value').then(function (profileSnap) {
    return !config.updateProfileOnLogin && profileSnap.val() !== null ? profileSnap.val() : profileSnap.ref.update(profile).then(function () {
      return profile;
    });
  }).catch(function (err) {
    dispatch({ type: _constants.actionTypes.UNAUTHORIZED_ERROR, authError: err });
    return Promise.reject(err);
  });
};

var setupPresence = function setupPresence(dispatch, firebase) {
  if (!firebase.database || !firebase.database.ServerValue) {
    return;
  }
  var ref = firebase.database().ref();
  var _firebase$_2 = firebase._,
      _firebase$_2$config = _firebase$_2.config,
      presence = _firebase$_2$config.presence,
      sessions = _firebase$_2$config.sessions,
      authUid = _firebase$_2.authUid;

  var amOnline = ref.child('.info/connected');
  var onlineRef = ref.child((0, _lodash.isFunction)(presence) ? presence(firebase.auth().currentUser, firebase) : presence).child(authUid);
  var sessionsRef = (0, _lodash.isFunction)(sessions) ? sessions(firebase.auth().currentUser, firebase) : sessions;
  if (sessionsRef) {
    sessionsRef = ref.child(sessions);
  }
  amOnline.on('value', function (snapShot) {
    if (!snapShot.val()) return;

    if (sessionsRef) {
      dispatch({ type: _constants.actionTypes.SESSION_START, payload: authUid });

      var session = sessionsRef.push({
        startedAt: firebase.database.ServerValue.TIMESTAMP,
        user: authUid
      });

      session.setPriority(authUid);
      var endedRef = session.child('endedAt');
      endedRef.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP, function () {
        dispatch({ type: _constants.actionTypes.SESSION_END });
      });
    }

    onlineRef.set(true);
    onlineRef.onDisconnect().remove();
  });
};

var init = exports.init = function init(dispatch, firebase) {
  if (!firebase.auth) {
    return;
  }
  dispatch({ type: _constants.actionTypes.AUTHENTICATION_INIT_STARTED });
  firebase.auth().onAuthStateChanged(function (authData) {
    var config = firebase._.config;

    if (!authData) {
      if ((0, _lodash.isFunction)(config.onAuthStateChanged) && config.enableEmptyAuthChanges) {
        firebase._.config.onAuthStateChanged(authData, firebase, dispatch);
      }

      return dispatch({ type: _constants.actionTypes.AUTH_EMPTY_CHANGE });
    }

    firebase._.authUid = authData.uid;

    if (config.presence && firebase.database && firebase.database.ServerValue) {
      setupPresence(dispatch, firebase);
    }

    watchUserProfile(dispatch, firebase);

    dispatch({ type: _constants.actionTypes.LOGIN, auth: authData });

    if ((0, _lodash.isFunction)(config.onAuthStateChanged)) {
      config.onAuthStateChanged(authData, firebase, dispatch);
    }
  });

  if (firebase._.config.enableRedirectHandling && typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('http') !== -1) {
    firebase.auth().getRedirectResult().then(function (authData) {
      if (typeof firebase._.config.onRedirectResult === 'function') {
        firebase._.config.onRedirectResult(authData, firebase, dispatch);
      }
      if (authData && authData.user) {
        var user = authData.user;


        firebase._.authUid = user.uid;
        watchUserProfile(dispatch, firebase);

        dispatch({ type: _constants.actionTypes.LOGIN, auth: user });

        createUserProfile(dispatch, firebase, user, {
          email: user.email,
          displayName: user.providerData[0].displayName || user.email,
          avatarUrl: user.providerData[0].photoURL,
          providerData: user.providerData
        });
      }
    }).catch(function (error) {
      dispatchLoginError(dispatch, error);
      return Promise.reject(error);
    });
  }

  firebase.auth().currentUser;

  dispatch({ type: _constants.actionTypes.AUTHENTICATION_INIT_FINISHED });
};

var login = exports.login = function login(dispatch, firebase, credentials) {
  var _firebase$auth;

  if (firebase._.config.resetBeforeLogin) {
    dispatchLoginError(dispatch, null);
  }

  var _getLoginMethodAndPar = (0, _auth.getLoginMethodAndParams)(firebase, credentials),
      method = _getLoginMethodAndPar.method,
      params = _getLoginMethodAndPar.params;

  return (_firebase$auth = firebase.auth())[method].apply(_firebase$auth, _toConsumableArray(params)).then(function (userData) {
    if (!userData) return Promise.resolve(null);

    if (method === 'signInWithEmailAndPassword') {
      return { user: userData };
    }

    if (method === 'signInWithCustomToken') {
      if (!firebase._.config.updateProfileOnLogin) {
        return { user: userData };
      }
      return createUserProfile(dispatch, firebase, userData);
    }

    var user = userData.user || userData;

    return createUserProfile(dispatch, firebase, user, {
      email: user.email,
      displayName: user.providerData[0].displayName || user.email,
      avatarUrl: user.providerData[0].photoURL,
      providerData: user.providerData
    }).then(function (profile) {
      return _extends({ profile: profile }, userData);
    });
  }).catch(function (err) {
    dispatchLoginError(dispatch, err);
    return Promise.reject(err);
  });
};

var logout = exports.logout = function logout(dispatch, firebase) {
  return firebase.auth().signOut().then(function () {
    dispatch({
      type: _constants.actionTypes.LOGOUT,
      preserve: firebase._.config.preserveOnLogout
    });
    firebase._.authUid = null;
    unWatchUserProfile(firebase);
    return firebase;
  });
};

var createUser = exports.createUser = function createUser(dispatch, firebase, _ref, profile) {
  var email = _ref.email,
      password = _ref.password,
      signIn = _ref.signIn;

  dispatchLoginError(dispatch, null);

  if (!email || !password) {
    dispatchLoginError(dispatch, new Error('Email and Password are required to create user'));
    return Promise.reject(new Error('Email and Password are Required'));
  }

  return firebase.auth().createUserWithEmailAndPassword(email, password).then(function (userData) {
    return firebase.auth().currentUser || !!signIn && signIn === false ? createUserProfile(dispatch, firebase, userData, profile || { email: email }) : login(dispatch, firebase, { email: email, password: password }).then(function () {
      return createUserProfile(dispatch, firebase, userData, profile || { email: email });
    }).catch(function (err) {
      if (err) {
        switch (err.code) {
          case 'auth/user-not-found':
            dispatchLoginError(dispatch, new Error('The specified user account does not exist.'));
            break;
          default:
            dispatchLoginError(dispatch, err);
        }
      }
      return Promise.reject(err);
    });
  }).catch(function (err) {
    dispatchLoginError(dispatch, err);
    return Promise.reject(err);
  });
};

var resetPassword = exports.resetPassword = function resetPassword(dispatch, firebase, email) {
  dispatchLoginError(dispatch, null);
  return firebase.auth().sendPasswordResetEmail(email).catch(function (err) {
    if (err) {
      switch (err.code) {
        case 'auth/user-not-found':
          dispatchLoginError(dispatch, new Error('The specified user account does not exist.'));
          break;
        default:
          dispatchLoginError(dispatch, err);
      }
      return Promise.reject(err);
    }
  });
};

var confirmPasswordReset = exports.confirmPasswordReset = function confirmPasswordReset(dispatch, firebase, code, password) {
  dispatchLoginError(dispatch, null);
  return firebase.auth().confirmPasswordReset(code, password).catch(function (err) {
    if (err) {
      switch (err.code) {
        case 'auth/expired-action-code':
          dispatchLoginError(dispatch, new Error('The action code has expired.'));
          break;
        case 'auth/invalid-action-code':
          dispatchLoginError(dispatch, new Error('The action code is invalid.'));
          break;
        case 'auth/user-disabled':
          dispatchLoginError(dispatch, new Error('The user is disabled.'));
          break;
        case 'auth/user-not-found':
          dispatchLoginError(dispatch, new Error('The user is not found.'));
          break;
        case 'auth/weak-password':
          dispatchLoginError(dispatch, new Error('The password is not strong enough.'));
          break;
        default:
          dispatchLoginError(dispatch, err);
      }
      return Promise.reject(err);
    }
  });
};

var verifyPasswordResetCode = exports.verifyPasswordResetCode = function verifyPasswordResetCode(dispatch, firebase, code) {
  dispatchLoginError(dispatch, null);
  return firebase.auth().verifyPasswordResetCode(code).catch(function (err) {
    if (err) {
      dispatchLoginError(dispatch, err);
    }
    return Promise.reject(err);
  });
};

var updateProfile = exports.updateProfile = function updateProfile(dispatch, firebase, profileUpdate) {
  var database = firebase.database,
      _firebase$_3 = firebase._,
      config = _firebase$_3.config,
      authUid = _firebase$_3.authUid;

  dispatch({
    type: _constants.actionTypes.PROFILE_UPDATE_START,
    payload: profileUpdate
  });
  var profileRef = database().ref(config.userProfile + '/' + authUid);
  return profileRef.update(profileUpdate).then(function () {
    return profileRef.once('value').then(function (snap) {
      dispatch({
        type: _constants.actionTypes.PROFILE_UPDATE_SUCCESS,
        payload: snap.val()
      });
      return snap;
    });
  }).catch(function (payload) {
    dispatch({ type: _constants.actionTypes.PROFILE_UPDATE_ERROR, payload: payload });
    return Promise.reject(payload);
  });
};

var updateAuth = exports.updateAuth = function updateAuth(dispatch, firebase, authUpdate, updateInProfile) {
  dispatch({ type: _constants.actionTypes.AUTH_UPDATE_START, payload: authUpdate });

  if (!firebase.auth().currentUser) {
    var msg = 'User must be logged in to update auth.';
    dispatch({ type: _constants.actionTypes.AUTH_UPDATE_ERROR, payload: msg });
    return Promise.reject(msg);
  }

  return firebase.auth().currentUser.updateProfile(authUpdate).then(function (payload) {
    dispatch({
      type: _constants.actionTypes.AUTH_UPDATE_SUCCESS,
      payload: firebase.auth().currentUser
    });
    if (updateInProfile) {
      return updateProfile(dispatch, firebase, authUpdate);
    }
    return payload;
  }).catch(function (payload) {
    dispatch({ type: _constants.actionTypes.AUTH_UPDATE_ERROR, payload: payload });
    return Promise.reject(payload);
  });
};

var updateEmail = exports.updateEmail = function updateEmail(dispatch, firebase, newEmail, updateInProfile) {
  dispatch({ type: _constants.actionTypes.EMAIL_UPDATE_START, payload: newEmail });

  if (!firebase.auth().currentUser) {
    var msg = 'User must be logged in to update email.';
    dispatch({ type: _constants.actionTypes.EMAIL_UPDATE_ERROR, payload: msg });
    return Promise.reject(msg);
  }

  return firebase.auth().currentUser.updateEmail(newEmail).then(function (payload) {
    dispatch({ type: _constants.actionTypes.EMAIL_UPDATE_SUCCESS, payload: newEmail });
    if (updateInProfile) {
      return updateProfile(dispatch, firebase, { email: newEmail });
    }
    return payload;
  }).catch(function (payload) {
    dispatch({ type: _constants.actionTypes.EMAIL_UPDATE_ERROR, payload: payload });
    return Promise.reject(payload);
  });
};

var reloadAuth = exports.reloadAuth = function reloadAuth(dispatch, firebase) {
  dispatch({ type: _constants.actionTypes.AUTH_RELOAD_START });

  if (!firebase.auth().currentUser) {
    var err = new Error('Must be logged in to reload auth');
    dispatch({ type: _constants.actionTypes.AUTH_RELOAD_ERROR, payload: err });
    return Promise.reject(err);
  }

  return firebase.auth().currentUser.reload().then(function () {
    var auth = firebase.auth().currentUser;
    dispatch({ type: _constants.actionTypes.AUTH_RELOAD_SUCCESS, payload: auth });
    return auth;
  }).catch(function (err) {
    dispatch({ type: _constants.actionTypes.AUTH_RELOAD_ERROR, payload: err });
    return Promise.reject(err);
  });
};

var linkWithCredential = exports.linkWithCredential = function linkWithCredential(dispatch, firebase, credential) {
  dispatch({ type: _constants.actionTypes.AUTH_LINK_START });

  if (!firebase.auth().currentUser) {
    var err = new Error('Must be logged in to linkWithCredential');
    dispatch({ type: _constants.actionTypes.AUTH_LINK_ERROR, payload: err });
    return Promise.reject(err);
  }

  return firebase.auth().currentUser.linkWithCredential(credential).then(function (auth) {
    dispatch({ type: _constants.actionTypes.AUTH_LINK_SUCCESS, payload: auth });
    return auth;
  }).catch(function (err) {
    dispatch({ type: _constants.actionTypes.AUTH_LINK_ERROR, payload: err });
    return Promise.reject(err);
  });
};

exports.default = {
  dispatchLoginError: dispatchLoginError,
  unWatchUserProfile: unWatchUserProfile,
  watchUserProfile: watchUserProfile,
  init: init,
  createUserProfile: createUserProfile,
  login: login,
  logout: logout,
  createUser: createUser,
  resetPassword: resetPassword,
  confirmPasswordReset: confirmPasswordReset,
  verifyPasswordResetCode: verifyPasswordResetCode,
  updateAuth: updateAuth,
  updateProfile: updateProfile,
  updateEmail: updateEmail,
  reloadAuth: reloadAuth
};