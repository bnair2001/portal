'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

exports.deleteFile = deleteFile;
exports.writeMetadataToDb = writeMetadataToDb;
exports.uploadFileWithProgress = uploadFileWithProgress;

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FILE_UPLOAD_ERROR = _constants.actionTypes.FILE_UPLOAD_ERROR,
    FILE_UPLOAD_PROGRESS = _constants.actionTypes.FILE_UPLOAD_PROGRESS;
function deleteFile(firebase, _ref) {
  var path = _ref.path,
      dbPath = _ref.dbPath;

  return firebase.storage().ref(path).delete().then(function () {
    if (!dbPath || !firebase.database && !firebase.firestore) {
      return { path: path };
    }

    var metaDeletePromise = function metaDeletePromise() {
      return firebase._.config.useFirestoreForStorageMeta ? firebase.firestore().doc(dbPath).delete() : firebase.database().ref(dbPath).remove();
    };

    return metaDeletePromise().then(function () {
      return { path: path, dbPath: dbPath };
    });
  });
}

function createUploadMetaResponseHandler(_ref2) {
  var fileData = _ref2.fileData,
      uploadTaskSnapshot = _ref2.uploadTaskSnapshot;

  return function uploadResultFromSnap(metaDataSnapshot) {
    var result = {
      snapshot: metaDataSnapshot,
      key: metaDataSnapshot.key || metaDataSnapshot.id,
      File: fileData,
      metaDataSnapshot: metaDataSnapshot,
      uploadTaskSnapshot: uploadTaskSnapshot,

      get uploadTaskSnaphot() {
        console.warn('Warning "uploadTaskSnaphot" method is deprecated (in favor of the correctly spelled version) and will be removed in the next major version');

        return uploadTaskSnapshot;
      }
    };
    if (metaDataSnapshot.id) {
      result.id = metaDataSnapshot.id;
    }
    return result;
  };
}

function writeMetadataToDb(_ref3) {
  var firebase = _ref3.firebase,
      uploadTaskSnapshot = _ref3.uploadTaskSnapshot,
      dbPath = _ref3.dbPath,
      options = _ref3.options;
  var _uploadTaskSnapshot$m = uploadTaskSnapshot.metadata,
      name = _uploadTaskSnapshot$m.name,
      fullPath = _uploadTaskSnapshot$m.fullPath,
      downloadURLs = _uploadTaskSnapshot$m.downloadURLs,
      size = _uploadTaskSnapshot$m.size,
      contentType = _uploadTaskSnapshot$m.contentType;
  var _firebase$_$config = firebase._.config,
      fileMetadataFactory = _firebase$_$config.fileMetadataFactory,
      useFirestoreForStorageMeta = _firebase$_$config.useFirestoreForStorageMeta;
  var metadataFactory = options.metadataFactory;

  var metaFactoryFunction = metadataFactory || fileMetadataFactory;

  var originalFileMeta = {
    name: name,
    fullPath: fullPath,
    size: size,
    contentType: contentType,
    downloadURL: downloadURLs[0],
    createdAt: useFirestoreForStorageMeta ? firebase.firestore.FieldValue.serverTimestamp() : firebase.database.ServerValue.TIMESTAMP
  };

  var fileData = (0, _isFunction3.default)(metaFactoryFunction) ? metaFactoryFunction(uploadTaskSnapshot, firebase, originalFileMeta) : originalFileMeta;

  var resultFromSnap = createUploadMetaResponseHandler({
    fileData: fileData,
    uploadTaskSnapshot: uploadTaskSnapshot
  });

  var metaSetPromise = function metaSetPromise(fileData) {
    return useFirestoreForStorageMeta ? firebase.firestore().collection(dbPath).add(fileData) : firebase.database().ref(dbPath).push(fileData);
  };

  return metaSetPromise(fileData).then(resultFromSnap);
}

function uploadFileWithProgress(dispatch, firebase, _ref4) {
  var path = _ref4.path,
      file = _ref4.file,
      filename = _ref4.filename,
      meta = _ref4.meta;

  var uploadEvent = firebase.storage().ref(path + '/' + filename).put(file);

  var unListen = uploadEvent.on(firebase.storage.TaskEvent.STATE_CHANGED, {
    next: function next(snapshot) {
      dispatch({
        type: FILE_UPLOAD_PROGRESS,
        meta: meta,
        payload: {
          snapshot: snapshot,
          percent: Math.floor(snapshot.bytesTransferred / snapshot.totalBytes * 100)
        }
      });
    },
    error: function error(err) {
      dispatch({ type: FILE_UPLOAD_ERROR, meta: meta, payload: err });
      unListen();
    },
    complete: function complete() {
      unListen();
    }
  });
  return uploadEvent;
}